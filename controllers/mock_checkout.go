// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/checkout.go
//
// Generated by this command:
//
//	mockgen -source controllers/checkout.go -package controllers -self_package=github.com/hybrid-cloud-patterns/patterns-operator/controllers
//
// Package controllers is a generated GoMock package.
package controllers

import (
	reflect "reflect"

	git "github.com/go-git/go-git/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockGitOperations is a mock of GitOperations interface.
type MockGitOperations struct {
	ctrl     *gomock.Controller
	recorder *MockGitOperationsMockRecorder
}

// MockGitOperationsMockRecorder is the mock recorder for MockGitOperations.
type MockGitOperationsMockRecorder struct {
	mock *MockGitOperations
}

// NewMockGitOperations creates a new mock instance.
func NewMockGitOperations(ctrl *gomock.Controller) *MockGitOperations {
	mock := &MockGitOperations{ctrl: ctrl}
	mock.recorder = &MockGitOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitOperations) EXPECT() *MockGitOperationsMockRecorder {
	return m.recorder
}

// CloneRepository mocks base method.
func (m *MockGitOperations) CloneRepository(directory string, isBare bool, options *git.CloneOptions) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneRepository", directory, isBare, options)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneRepository indicates an expected call of CloneRepository.
func (mr *MockGitOperationsMockRecorder) CloneRepository(directory, isBare, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneRepository", reflect.TypeOf((*MockGitOperations)(nil).CloneRepository), directory, isBare, options)
}

// OpenRepository mocks base method.
func (m *MockGitOperations) OpenRepository(directory string) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenRepository", directory)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenRepository indicates an expected call of OpenRepository.
func (mr *MockGitOperationsMockRecorder) OpenRepository(directory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenRepository", reflect.TypeOf((*MockGitOperations)(nil).OpenRepository), directory)
}
